import numpy as np
import matplotlib.pyplot as plt
import pymc as pm
import os

def logistic(x, beta, alpha):
    return 1 / (1 + np.exp(beta * x + alpha))

def main():
    # Obtenemos la ruta completa del archivo freezer.txt
    current_dir = os.path.dirname(os.path.abspath(__file__))
    file_path = os.path.join(current_dir, 'freezer.txt')

    # Leemos datos de freezer.txt
    data = np.loadtxt(file_path)
    x = data[:, 0]
    y = data[:, 1]

    with pm.Model() as sleep_model:
        # Creamos los parámetros alpha y beta
        # Asumimos una distribución normal
        alpha = pm.Normal('alpha', mu=0.0, sigma=1.0, initval=0.0)
        beta = pm.Normal('beta', mu=0.0, sigma=1.0, initval=0.0)
        
        # La probabilidad de estar en ayuna se modela como una función logística
        p = pm.Deterministic('p', 1. / (1. + pm.math.exp(beta * x + alpha)))
        
        # Creamos el parámetro de Bernoulli 
        observed = pm.Bernoulli('obs', p, observed=y)
        
        # Usamos Metropolis Hastings Sampling
        step = pm.Metropolis()
        
        # burn-in de 1000
        eat_trace = pm.sample(2000, step=step, tune=1000)

    plt.rcParams.update({'axes.labelsize': 8, 'xtick.labelsize': 8, 'ytick.labelsize': 8, 'font.size': 8})

    # Trazar  alpha y beta
    pm.plot_trace(eat_trace, var_names=['alpha', 'beta'])
    plt.show()  # Mostramos la gráfica de convergencia

    # Obtenenemos los valores medios de alpha y beta
    alpha_samples = eat_trace.posterior['alpha'].values
    beta_samples = eat_trace.posterior['beta'].values
    alpha_mean = alpha_samples.mean()
    beta_mean = beta_samples.mean()
    
    # Graficamos la probabilidad estimada 
    plt.figure(figsize=(12, 6))
    
    # Calcular la probabilidad estimada en cada punto de tiempo
    time_est = np.linspace(x.min() - 5, x.max() + 5, 1000)
    eat_est = logistic(time_est, beta_mean, alpha_mean)
    
    plt.plot(time_est, eat_est, color='orange',linewidth=6)
    
    plt.xlabel('Tiempo (minutos)', fontsize=24)
    plt.ylabel('Probabilidad', fontsize=24)
    plt.xticks(fontsize=24)
    plt.yticks(fontsize=24)
    plt.legend()
    plt.grid(False)
    plt.show()

if __name__ == '__main__':
    main()

