import numpy as np
import matplotlib.pyplot as plt
import emcee
import pymc as pm
import os
from matplotlib.ticker import ScalarFormatter

if __name__ == '__main__':

    plt.rcParams['figure.figsize'] = (20,10)

    # Obtenemos la ruta completa del archivo .txt
    current_dir = os.path.dirname(os.path.abspath(__file__))
    file_path = os.path.join(current_dir, 'ice_core_data.txt')

    # Leemos datos del archivo.txt
    ice_data = np.loadtxt(file_path)
    ice_data = np.transpose(ice_data)
    age = ice_data[2]
    T = ice_data[4]
    plt.plot(age, T, color="orange")
    plt.xlabel('año',fontsize=24)
    plt.ylabel(r'$\Delta T (°C)$',fontsize=24)
    plt.xticks(fontsize=24)
    plt.yticks(fontsize=24)
    ax = plt.gca()
    ax.xaxis.set_major_formatter(ScalarFormatter(useMathText=True))
    ax.ticklabel_format(style='sci', axis='x', scilimits=(0,0))
    ax.xaxis.get_offset_text().set_size(24)  # Aumenta el tamaño del x10^5

    plt.show()

    def model(theta, age=age):
        a1, a2, a3, p1, p2, p3, T0 = theta
        return a1 * np.sin(2 * np.pi * age / p1) + a2 * np.sin(2 * np.pi * age / p2) + a3 * np.sin(2 * np.pi * age / p3) + T0

    def lnlike(theta, x, y, yerr):
        return -0.5 * np.sum(((y - model(theta, x)) / yerr) ** 2)

    def lnprior(theta):
        a1, a2, a3, p1, p2, p3, T0 = theta
        if 0.0 < a1 < 5.0 and 0.0 < a2 < 5.0 and 0.0 < a3 < 5.0 and 10000. < p1 < 200000 and 10000. < p2 < 200000 and 10000. < p3 < 200000 and -10.0 < T0 < 0:
            return 0.0
        return -np.inf

    def lnprob(theta, x, y, yerr):
        lp = lnprior(theta)
        if not np.isfinite(lp):
            return -np.inf
        return lp + lnlike(theta, x, y, yerr)

    Terr = 0.05 * np.mean(T)
    data = (age, T, Terr)
    nwalkers = 128
    niter = 500
    initial = np.array([1.0, 1.0, 1.0, 26000., 41000., 100000., -4.5])
    ndim = len(initial)
    p0 = [np.array(initial) + 1e-7 * np.random.randn(ndim) for i in range(nwalkers)]

    def main(p0, nwalkers, niter, ndim, lnprob, data):
        sampler = emcee.EnsembleSampler(nwalkers, ndim, lnprob, args=data)

        print("Running burn-in...")
        p0, _, _ = sampler.run_mcmc(p0, 100)
        sampler.reset()

        print("Running production...")
        pos, prob, state = sampler.run_mcmc(p0, niter)

        return sampler, pos, prob, state

    sampler, pos, prob, state = main(p0, nwalkers, niter, ndim, lnprob, data)

    def plotter(sampler, age=age, T=T):
        plt.ion()
        plt.plot(age, T, label='Change in T')
        samples = sampler.flatchain
        for theta in samples[np.random.randint(len(samples), size=100)]:
            plt.plot(age, model(theta, age), color="r", alpha=0.1)
        plt.ticklabel_format(style='sci', axis='x', scilimits=(0, 0))
        plt.xlabel('Years ago')
        plt.ylabel(r'$\Delta$ T (degrees)')
        plt.legend()
        plt.show()

    samples = sampler.flatchain
    samples[np.argmax(sampler.flatlnprobability)]

    samples = sampler.flatchain

    theta_max = samples[np.argmax(sampler.flatlnprobability)]
    best_fit_model = model(theta_max)
    plt.plot(age, T, label='Change in T',color="orange")
    plt.xlabel('año',fontsize=24)
    plt.ylabel(r'$\Delta T (°C)$',fontsize=24)
    plt.xticks(fontsize=24)
    plt.yticks(fontsize=24)
    ax = plt.gca()
    ax.xaxis.set_major_formatter(ScalarFormatter(useMathText=True))
    ax.ticklabel_format(style='sci', axis='x', scilimits=(0,0))
    ax.xaxis.get_offset_text().set_size(24)  # Aumenta el tamaño del x10^5
    plt.plot(age, best_fit_model, label='Highest Likelihood Model')
    plt.show()
    print('Theta max: ', theta_max)
