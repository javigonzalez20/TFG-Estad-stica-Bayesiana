import numpy as np
import matplotlib.pyplot as plt
import pymc as pm

if __name__ == '__main__':

    # Obtenemos la ruta completa del archivo temperatura.txt
    current_dir = os.path.dirname(os.path.abspath(__file__))
    file_path = os.path.join(current_dir, 'temperatura.txt')

    # Leemos los datos de temperatura.txt
    data = np.loadtxt(file_path)
    x = data[:, 0]
    y = data[:, 1]

    plt.plot(x, y, 'o')
    plt.title('Evolución de la temperatura media de Málaga')
    plt.xlabel('Tiempo')
    plt.ylabel('Temperatura Media')
    plt.show()

    with pm.Model() as model:
        # a priori
        amplitude = pm.HalfNormal('amplitude', sigma=1)
        frequency = pm.Normal('frequency', mu=0, sigma=1)

        b = pm.Normal('b', mu=200000, sigma=1)  # New parameter
        noise_sd = pm.HalfNormal('noise_sd', sigma=1)

        # Valor esperado
        y_hat = amplitude * pm.math.sin(2 * np.pi * frequency * x)+b

        # Likelihood
        y_obs = pm.Normal('y_obs', mu=y_hat, sigma=noise_sd, observed=y)

        # Sampling
        trace = pm.sample(2000, tune=1000)

    pm.plot_trace(trace)
    plt.show()

    pm.plot_posterior(trace)
    plt.show()

    # obtenemos las distribuciones posteriores
    amplitude_samples = trace.posterior['amplitude'].values
    frequency_samples = trace.posterior['frequency'].values
    b_samples = trace.posterior['b'].values

    x_new = x[None, None, :]

    #Generamos los valores predichos por el modelo
    y_hat = (amplitude_samples[..., None] * np.sin(2 * np.pi * frequency_samples[..., None] * x_new)) + b_samples[..., None]

    #computamos la media y la desviacion estandar
    y_hat_mean = y_hat.mean(axis=(0, 1))
    y_hat_std = y_hat.std(axis=(0, 1))

    # ploteamos
    plt.figure(figsize=(10, 5))
    plt.plot(x, y, 'o', label='Observed data')
    plt.plot(x, y_hat_mean, color='C1', label='Predicted value')
    plt.fill_between(x, y_hat_mean - 2*y_hat_std, y_hat_mean + 2*y_hat_std, color='C1', alpha=0.3, label='Confidence interval')
    plt.title('Time Series Bayesian Analysis with PyMC')
    plt.xlabel('Time')
    plt.ylabel('Value')
    plt.legend()
    plt.show()
